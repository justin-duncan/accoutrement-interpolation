@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/ratio/tokens';
@use '../../sass/ratio/vars';

// Ratio Var Tests
// ===============
@include test-module('ratio/vars') {
  $global: tokens.$ratios;

  tokens.$ratios: (
    '_private': 0.75,
    'simple': 0.125,
    'kevin': '#_private',
    'thread': '#kevin',
    'default': '#_octave'
  );

  // Ratios-- [mixin]
  // ------------------
  @include describe('Ratios-- [mixin]') {
    @include it('Generates CSS variables from the default ratio map') {
      @include assert {
        @include output {
          @include vars.ratios--;
        }

        @include expect {
          --ratio-simple: 0.125;
          --ratio-kevin: 0.75;
          --ratio-thread: var(--ratio-kevin, 0.75);
          --ratio-default: 2;
        }
      }
    }

    @include it('Generates CSS variables for any ratio map') {
      @include assert {
        @include output {
          @include vars.ratios--(
            (
              'mine': 0.5,
            )
          );
        }

        @include expect {
          --ratio-mine: 0.5;
        }
      }
    }
  }

  // Ratio-- [mixin]
  // -----------------
  @include describe('Ratio-- [mixin]') {
    @include it('Generates a single variable from a token') {
      @include assert {
        @include output {
          @include vars.ratio--('simple');
        }

        @include expect {
          --ratio-simple: 0.125;
        }
      }
    }

    @include it('Generates a reference variable from a token') {
      @include assert {
        @include output {
          @include vars.ratio--('thread');
        }

        @include expect {
          --ratio-thread: var(--ratio-kevin, 0.75);
        }
      }
    }

    @include it('Generate reference to default ratio') {
      @include assert {
        @include output {
          @include vars.ratio--('default');
        }

        @include expect {
          --ratio-default: 2;
        }
      }
    }

    @include it('Generates a new variable alias') {
      @include assert {
        @include output {
          @include vars.ratio--('alias', 'thread');
        }

        @include expect {
          --ratio-alias: var(--ratio-thread, 0.75);
        }
      }
    }
  }

  // Var-Ratio [function]
  // --------------------
  @include describe('Var-Ratio [function]') {
    @include it('Accesses a ratio variable with default fallback') {
      @include assert-equal(
        vars.var-ratio('simple'),
        var(--ratio-simple, tokens.ratio('simple'))
      );
    }

    @include it('Allows custom fallback') {
      @include assert-equal(
        vars.var-ratio('simple', 0.125),
        var(--ratio-simple, 0.125)
      );
    }

    @include it('Allows false fallback') {
      @include assert-equal(
        vars.var-ratio('simple', false),
        var(--ratio-simple)
      );
    }

    @include it('Accepts custom palette') {
      $my-palette: (
        'my-base': 0.25,
        'my-adjustment': '#my-base'
          (
            'divide': 2,
          ),
      );

      @include assert-equal(
        vars.var-ratio('my-adjustment', $source: $my-palette),
        var(
          --ratio-my-adjustment,
          tokens.ratio('my-adjustment', $source: $my-palette)
        )
      );
    }
  }

  tokens.$ratios: $global;
} // end module
