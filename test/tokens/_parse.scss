@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/tokens/parse';
@use '../../sass/tokens/function';
@use '../../sass/tokens/register';
@use 'sass:color';

$mix: function.get('color.mix');
$alpha: function.get('color.alpha');
$scale: function.get('color.scale');

@include test-module('tokens/parse') {
  @include describe('normalize [function]') {
    @include it('Handles explicit %value/do maps') {
      @include assert-equal(
        parse.normalize-token(
          (
            '%value': 3,
            'do': 'something',
            'and': 'another',
          )
        ),
        (
          'value': 3,
          'do': (
            'do': 'something',
            'and': 'another',
          ),
        )
      );
    }

    @include it('Handles simple values') {
      @include assert-equal(
        parse.normalize-token('token'),
        (
          'value': 'token',
          'do': null,
        )
      );
    }

    @include it('Handles map values') {
      @include assert-equal(
        parse.normalize-token(
          (
            'just': 'a',
            'normal': 'map',
          )
        ),
        (
          'value': (
            'just': 'a',
            'normal': 'map',
          ),
          'do': null,
        )
      );
    }

    @include it('Handles list values') {
      @include assert-equal(
        parse.normalize-token(just a 'normal' list),
        (
          'value': just a 'normal' list,
          'do': null,
        )
      );
    }
  }

  @include describe('next-alias [function]') {
    @include it(
      'Returns `null` if the given string contains no hash references'
    ) {
      @include assert-equal(
        parse.next-alias('not a single hash in here'),
        null
      );
    }

    @include it('Returns `null` given empty string') {
      @include assert-equal(parse.next-alias(''), null);
    }

    @include it('Returns a hash reference in a string') {
      @include assert-equal(
        parse.next-alias("there's a hash in this string: #hash"),
        (
          'alias': 'hash',
          'start': 32,
          'end': 37,
        )
      );
    }

    @include it('Returns the first hash reference encountered in a string') {
      @include assert-equal(
        parse.next-alias(
          "there's a number of hashes in this string: #hash #hash2 #hash3"
        ),
        (
          'alias': 'hash',
          'start': 44,
          'end': 49,
        )
      );
    }

    @include it(
      'Returns the next hash reference in a string from index param'
    ) {
      @include assert-equal(
        parse.next-alias(
          "there's a number of hashes in this string: #hash #hash2 #hash3",
          49
        ),
        (
          'alias': 'hash2',
          'start': 50,
          'end': 56,
        )
      );
    }

    @include it('Terminates the retrieved hash on a space character') {
      @include assert-equal(
        parse.next-alias("there's a #hash here too"),
        (
          'alias': 'hash',
          'start': 11,
          'end': 16,
        )
      );
    }

    @include it('Terminates the retrieved hash on a `)` character') {
      @include assert-equal(
        parse.next-alias('one (#hash) reference, please'),
        (
          'alias': 'hash',
          'start': 6,
          'end': 11,
        )
      );
    }

    @include it('Returns the first hash reference of concatenated references') {
      @include assert-equal(
        parse.next-alias('#hashes#glued#together'),
        (
          'alias': 'hashes',
          'start': 1,
          'end': 8,
        )
      );
    }

    @include it(
      'Returns the second hash reference of concatenated references when index is provided'
    ) {
      @include assert-equal(
        parse.next-alias('#hashes#glued#together', 8),
        (
          'alias': 'glued',
          'start': 8,
          'end': 14,
        )
      );
    }

    @include it('Recognizes an explicitly terminated hash reference') {
      @include assert-equal(
        parse.next-alias('terminate this#hash\\here'),
        (
          'alias': 'hash',
          'start': 15,
          'end': 20,
        )
      );
    }

    @include it('Ignores escaped hashes') {
      @include assert-equal(
        parse.next-alias('this hash is not a actually a reference: \\#no'),
        null
      );
    }
  }

  @include describe('lookup-alias [function]') {
    $map: (
      a: (
        b: (
          c: 'world',
        ),
      ),
      b: 'hello',
    );

    @include it('Does simple key lookup') {
      @include assert-equal(
        parse.lookup-alias($map, b),
        (
          'token': 'hello',
        )
      );
    }

    @include it('Does nested key->key lookup') {
      @include assert-equal(
        parse.lookup-alias($map, 'a->b->c'),
        (
          'token': 'world',
        )
      );
    }

    @include it('Returns null if the lookup fails') {
      @include assert-equal(parse.lookup-alias($map, 'a->b->d'), null);
    }

    @include it('Accepts non-string alias values') {
      @include assert-equal(parse.lookup-alias($map, red), null);
    }

    @include it('Optionally warn if the lookup fails') {
      @include assert-equal(
        parse.lookup-alias($map, 'a->b->d', $handle-missing-keys: 'warn'),
        'WARNING [lookup-alias] Alias "a->b->d" not found in map'
      );
    }
    @include it('Optionally warn if the lookup fails') {
      @include assert-equal(
        parse.lookup-alias($map, 'a->b->d', $handle-missing-keys: 'error'),
        'ERROR [lookup-alias] Alias "a->b->d" not found in map'
      );
    }
  }

  @include describe('do [function]') {
    @include it('Calls a first-class function with arguments') {
      @include assert-equal(
        parse.do($mix, white, black),
        color.mix(white, black)
      );
    }

    @include it('Calls a registered function with arguments') {
      @include assert-equal(
        parse.do('color.mix', white, black),
        color.mix(white, black)
      );
    }

    @include it('Removes null arguments') {
      @include assert-equal(
        parse.do('color.alpha', black, null),
        color.alpha(black)
      );
    }
  }

  @include describe('compile-token [function]') {
    $map: (
      simple: 'hello world',
      a: (
        b: (
          c: 'world',
        ),
      ),
      string: 'hello #a->b->c\\!',
      map: (
        'print': '#string',
      ),
      brand: mediumvioletred,
      alpha: (
        'alpha': 50%,
      ),
      bad: '#worse',
      worse: '#bad',
      h: 'hello',
      w: 'world',
    );

    @include it('Has no impact on a token without references') {
      @include assert-equal(
        parse.compile-token($map, 'hello'),
        'hello',
        'when the token is a string'
      );

      @include assert-equal(
        parse.compile-token($map, 30deg),
        30deg,
        'when the token is a number'
      );

      @include assert-equal(
        parse.compile-token($map, ('hello', 'world')),
        ('hello', 'world'),
        'when the token is a list'
      );

      @include assert-equal(
        parse.compile-token(
          $map,
          (
            'hello': 'world',
          )
        ),
        (
          'hello': 'world',
        ),
        'when the token is a map'
      );

      @include assert-equal(
        parse.compile-token($map, linear-gradient(#888, #eee)),
        linear-gradient(#888, #eee),
        'when the token is an unquoted CSS value containing #rrggbb colors'
      );

      @include assert-equal(
        parse.compile-token(
          $map,
          linear-gradient(hsl(31deg 94% 52%) 10%, hsl(274deg 95% 57%) 80%)
        ),
        linear-gradient(hsl(31deg 94% 52%) 10%, hsl(274deg 95% 57%) 80%),
        'when the token is an unquoted CSS value containing hsl colors'
      );
    }

    @include it('Resolves any alias references in the map') {
      @include assert-equal(
        parse.compile-token($map, '#simple'),
        'hello world',
        'list of aliases'
      );

      @include assert-equal(
        parse.compile-token($map, '#simple' '#string'),
        'hello world' 'hello world!',
        'list of aliases (with nesting)'
      );

      @include assert-equal(
        parse.compile-token($map, '#map'),
        (
          'print': 'hello world!',
        ),
        'recursive alias'
      );
    }

    @include it('Handles all token-terminators') {
      @include assert-equal(
        parse.compile-token($map, '#h#w'),
        'helloworld',
        'The # terminator'
      );

      @include assert-equal(
        parse.compile-token($map, '#h #w'),
        'hello world',
        'The space (` `) terminator'
      );

      @include assert-equal(
        parse.compile-token($map, '(#h)#w'),
        '(hello)world',
        'The end-parenthesis `)` terminator'
      );

      @include assert-equal(
        parse.compile-token($map, '#h\\00#w'),
        'hello00world',
        'The escape (`\\`) terminator'
      );
    }

    @include it('Ignores slashes detached from an alias') {
      @include assert-equal(
        parse.compile-token($map, 'any\\thing'),
        'any\\thing'
      );
    }

    @include it('Can perform functional adjustments') {
      $shadow: rgba(black, 0.5);

      @include assert-equal(
        parse.compile-token(
          $map,
          '#brand'
            (
              'color.mix': $shadow 20%,
              'color.scale': (
                'alpha': 50%,
              )
            )
        ),
        color.scale(color.mix(mediumvioletred, $shadow, 20%), $alpha: 50%)
      );
    }

    @include it('Allows alias references inside functional arguments') {
      $shadow: rgba(black, 0.5);

      @include assert-equal(
        parse.compile-token(
          $map,
          '#brand' ('color.mix': $shadow 20%, 'color.scale': '#alpha')
        ),
        color.scale(color.mix(mediumvioletred, $shadow, 20%), $alpha: 50%)
      );
    }

    @include it('Handles common calc use-case') {
      @include assert-equal(
        parse.compile-token($map, 'calc(10px + #alpha->alpha)'),
        'calc(10px + 50%)'
      );
    }

    @include it('Errors on recursive lookup') {
      @include assert-equal(
        parse.compile-token($map, '#bad'),
        'ERROR [compile-token] Recursive lookup loop: `bad, worse, bad`'
      );
    }
  }
}
