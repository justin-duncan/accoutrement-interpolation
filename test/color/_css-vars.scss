@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/color/css-vars' as vars;
@use '../../sass/color/tokens';

@include test-module('color/css-vars') {
  $test: (
    '_private': blue,
    'simple': red,
    'kevin': '#_private',
    'thread': '#kevin',
    'default': '#_contrast-light',
  );
  $global: tokens.$colors;
  tokens.$colors: $test;

  // Colors-- [mixin]
  // ------------------
  @include describe('Colors-- [mixin]') {
    @include it('Generates CSS variables from the default color map') {
      @include assert {
        @include output {
          @include vars.colors--;
        }

        @include expect {
          --color-simple: red;
          --color-kevin: blue;
          --color-thread: var(--color-kevin, blue);
          --color-default: #{tokens.color('_contrast-light')};
        }
      }
    }

    @include it('Generates CSS variables for any color map') {
      @include assert {
        @include output {
          @include vars.colors--(
            (
              'mine': green,
            )
          );
        }

        @include expect {
          --color-mine: green;
        }
      }
    }
  }

  // Color-- [mixin]
  // -----------------
  @include describe('Color-- [mixin]') {
    @include it('Generates a single variable from a token') {
      @include assert {
        @include output {
          @include vars.color--('simple');
        }

        @include expect {
          --color-simple: red;
        }
      }
    }

    @include it('Generates a reference variable from a token') {
      @include assert {
        @include output {
          @include vars.color--('thread');
        }

        @include expect {
          --color-thread: var(--color-kevin, blue);
        }
      }
    }

    @include it('Generate reference to default color') {
      @include assert {
        @include output {
          @include vars.color--('default');
        }

        @include expect {
          --color-default: #{tokens.color('_contrast-light')};
        }
      }
    }

    @include it('Generates a new variable alias') {
      @include assert {
        @include output {
          @include vars.color--('alias', 'thread');
        }

        @include expect {
          --color-alias: var(--color-thread, blue);
        }
      }
    }
  }

  // Var-Color [function]
  // --------------------
  @include describe('Var-Color [function]') {
    @include it('Accesses a color variable with default fallback') {
      @include assert-equal(
        vars.var-color('simple'),
        var(--color-simple, tokens.color('simple'))
      );
    }

    @include it('Allows custom fallback') {
      @include assert-equal(
        vars.var-color('simple', red),
        var(--color-simple, red)
      );
    }

    @include it('Allows false fallback') {
      @include assert-equal(
        vars.var-color('simple', false),
        var(--color-simple)
      );
    }

    @include it('Accepts custom palette') {
      $my-palette: (
        'my-base': #393,
        'my-adjustment': '#my-base'
          (
            'shade': 10%,
          ),
      );

      @include assert-equal(
        vars.var-color('my-adjustment', $source: $my-palette),
        var(
          --color-my-adjustment,
          tokens.color('my-adjustment', $source: $my-palette)
        )
      );
    }
  }

  tokens.$colors: $global;
} // end module
